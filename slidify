#!/bin/bash
#+
# Makes a movie out of a still frame that can be put onto a DVD-Video disc. Invoke this
# script as follows:
#
#     slidify [options] infile outfile
# or
#     slidify [options] --magick=magicksrc outfile
#
# where infile is the name of the input graphic in any still-image format that FFmpeg
# will understand, and outfile is the name of the MPEG file to create. Or as an alternative
# to infile, you can specify one of the built-in image sources provided by ImageMagick
# <http://www.imagemagick.org/script/formats.php#builtin-images>, for example xc: for
# a solid colour, gradient: for a linear gradient, or radial-gradient: for a radial
# gradient. Options for colours are explained here <http://www.imagemagick.org/script/color.php>.
#
# The other options are as follows:
#
#    --duration=seconds
#        specifies the duration of the output movie. If omitted, defaults to 1.0 seconds.
#        Fractions of a second are allowed.
#
#    --format=pal|ntsc
#        specifies the format of the output movie, either PAL or NTSC. If omitted,
#        defaults to PAL.
#
#    --widescreen
#        If present, specifies that the aspect ratio of the output movie is 16:9.
#        If omitted, it will be 4:3.
#
# The aspect ratio of the input image will be preserved, with borders added as necessary
# to make up the output aspect ratio.
#
# External programs needed: ImageMagick, FFmpeg, Perl, dd, bc.
#
# Written by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
#-

video_format=pal
widescreen=0
duration=1.0
audio_sample_rate=48000 # mustn't be changed
audio_channels=1 # probably not worth changing
magicksrc=
for ((;;)); do
	if [ "${1:0:2}" != "--" ]; then
		break
	fi
	opt="${1:2:${#1}}"
	shift
	val="${opt#*=}"
	opt="${opt%%=*}"
	if [ "$opt" = "duration" ]; then
		duration="$val"
	elif [ "$opt" = "format" ]; then
		video_format="$val"
		if [ "$video_format" != "pal" -a "$video_format" != "ntsc" ]; then
			echo "bad video format $video_format" 1>&2
			exit 3
		fi
	elif [ "$opt" = "magicksrc" ]; then
		magicksrc="$val"
	elif [ "$opt" = "widescreen" ]; then
		widescreen=1
	else
		echo "bad option $opt" 1>&2
		exit 3
	fi
done
optsusage="[--duration=seconds] [--format=pal|ntsc] [--widescreen]"
if [ "$magicksrc" != "" ]; then
	if [ $# != 1 ]; then
		echo $'Usage:\n\t'"$0 $optsusage"$' --magicksrc=magicksrc <outmovie>\n' 1>&2
		exit 3
	fi
	outfile="$1"
else 
	if [ $# != 2 ]; then
		echo $'Usage:\n\t'"$0 $optsusage"$' <instillframe> <outmovie>\n' 1>&2
		exit 3
	fi
	infile="$1"
	outfile="$2"
fi

if [ $widescreen != "0" ]; then
	frame_width=1024
	frame_height=576
else
	frame_width=768
	frame_height=576
fi
frame_size=${frame_width}x${frame_height}
if [ "$magicksrc" != "" ]; then
	src_frame_size="$frame_size"
else
	src_frame_size=$(
		identify -verbose <(convert -resize $frame_size "$infile" jpeg:/dev/stdout) |
		perl -lne '/Geometry\:\s+(\d+)x(\d+)/ && print "$1x$2";'
	)
fi
src_frame_width=${src_frame_size%x*}
src_frame_height=${src_frame_size#*x}
if [ $(($frame_width - $src_frame_width > 0)) != 0 -o $(($frame_height - $src_frame_height > 0)) != 0 ]; then
	reframe="-frame $(($(($frame_width - $src_frame_width)) / 2))x$(($(($frame_height - $src_frame_height)) / 2))"
else
	reframe=
fi

if [ "$magicksrc" != "" ]; then
	src="-size $src_frame_size $magicksrc"
else
	src=$(printf %q "$infile")
fi
if [ -e "$outfile" -a \( -b "$outfile" -o -c "$outfile" -o -p "$outfile" \) ] ; then
	overwrite=-y
else
	overwrite=
fi
if [ $widescreen != "0" ]; then
	aspect=16:9
else
	aspect=4:3
fi
ffmpeg -loop_input -t $duration -f mjpeg \
	-i <(convert $src -resize $frame_size $reframe jpeg:/dev/stdout) \
	-ar $audio_sample_rate -ac $audio_channels -f s16le \
		-i <(dd \
			if=/dev/zero count=1 \
			bs=$(bc <<<"scale = 0; $audio_sample_rate * $audio_channels * $duration * 2 / 1")
			  # division is necessary to trigger use of scale
		) \
	-target ${video_format}-dvd -aspect $aspect $overwrite "$outfile"
